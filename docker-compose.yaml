services:
  postgres:
    image: postgres:16
    container_name: postgres_db
    restart: always
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - pro_network
    
    
  pro_backend:
    build: 
      context: ./server
      dockerfile: Dockerfile
    container_name: pro_backend
    restart: always
    env_file: .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
    ports:
      - "5002:5002"
    depends_on:
      - postgres
    networks:
      - pro_network
    # environment:
    #   DATABASE_URL : postgresql://rajeev:admin@123@db:5432/projectmanagement
    # volumes:
    #   - ./server:/app
    #   - /app/node_modules
    # command: >
    #   sh -c "npm install && npm run build && npx prisma migrate dev && npm run seed && npm run start"

  pro_frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: pro_frontend
    restart: always
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL}
    depends_on:
      - pro_backend
    ports:
      - "3002:3002"
    networks:
      - pro_network
    # volumes:
    #   - ./client:/app
    #   - /app/node_modules
    #command: sh -c "npm install && npm run dev"

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx_proxy
  #   restart: always
  #   ports:
  #     - "8002:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - pro_backend
  #     - pro_frontend
  #   networks:
  #     - pro_network
  
networks:
  pro_network:
    driver: bridge
    
volumes:
  postgres_data:
  
